# Conformer-base模型PyTorch离线推理指导
- [1. 模型概述](#1)
    - [论文地址](#11)
    - [代码地址](#12)
- [2. 环境说明](#2)
    - [深度学习框架](#21)
    - [python第三方库](#22)
- [3. 模型转换](#3)
    - [pth转onnx模型](#31)
    - [onnx转om模型](#32)
- [4. 数据预处理](#4)
    - [数据处理](#41)
- [5. 离线推理](#5)
    - [msame工具概述](#51)
    - [离线推理](#52)
    - [精度和性能比较](#53)

## <a name="1">1. 模型概述</a>
### <a name="11">1.1 论文地址</a>
[Conformer-base论文]([https://arxiv.org/abs/2105.03889])

### <a name="12">1.2 代码地址</a>
[Conformer-base代码](https://github.com/open-mmlab/mmclassification)

## <a name="2">2. 环境说明</a>
### <a name="21">2.1 深度学习框架与第三方库</a>
```
CANN 5.1.RC1
mmcls==0.20.1
mmcv==1.4.7
mmcv-full==1.4.7
torchvision==0.10.0+cpu
torch==1.9.0+cpu
onnx==1.11.0
onnxruntime==1.10.0 
numpy==1.21.5
Pillow==9.1.0
```

> **说明：**  
> pytorch，torchvision和onnx:(X86架构)可以通过pip方式安装或官方下载whl包安装; (Arm架构)可以通过源码编译安装   

### <a name="21">2.2 安装开源仓代码并配置conda环境</a>
```bash	
git clone https://github.com/open-mmlab/mmclassification
cd mmclassification 
git apply ../Conformer-base.patch
conda create --name openmmlab python=3.7.5 -y
conda activate openmmlab
pip install torch==1.9.0+cpu torchvision==0.10.0+cpu -f https://download.pytorch.org/whl/torch_stable.html
pip install -U openmim
mim install mmcv-full
pip install mmcls
pip install onnxruntime
cd ..
```
### <a name="21">2.3 权重文件</a>

使用源仓提供的Conformer-base-p16*

链接：https://download.openmmlab.com/mmclassification/v0/conformer/conformer-base-p16_3rdparty_8xb128_in1k_20211206-bfdf8637.pth
 

## <a name="3">3. 模型转换</a>

### <a name="31">3.1 pth转onnx模型</a>
1. 获取权重文件
```bash
wget https://download.openmmlab.com/mmclassification/v0/conformer/conformer-base-p16_3rdparty_8xb128_in1k_20211206-bfdf8637.pth
```  

2. 执行pytorch2onnx.py脚本，生成动态onnx模型文件 
```bash
cd mmclassification
python tools/deployment/pytorch2onnx.py configs/conformer/conformer-base-p16_8xb128_in1k.py --checkpoint ../conformer-base-p16_3rdparty_8xb128_in1k_20211206-bfdf8637.pth --output-file ../conformer_base_dynamicbs.onnx --dynamic-export
cd ..
```
获得conformer_base_dynamicbs.onnx文件

### <a name="32">3.2 onnx转om模型</a>
使用atc将onnx模型转换为om模型文件，工具使用方法可以参考[CANN V100R020C10 开发辅助工具指南 (推理) 01](https://www.hiascend.com/document/detail/zh/CANNCommunityEdition/51RC2alpha002/infacldevg/atctool)

```bash
source /usr/local/Ascend/ascend-toolkit/set_env.sh 
 
atc --model=conformer_base_dynamicbs.onnx --framework=5 --output=conformer_base_bs{batch_size} --input_shape="input:{batch_size},3,224,224" --log=error --soc_version={soc_version}

```

## <a name="4">4. 数据预处理</a>
### <a name="41">4.1 获取原始数据集</a>
1本模型支持ImageNet 50000张图片的验证集。以ILSVRC2012为例，请用户需自行获取ILSVRC2012数据集http://www.image-net.org/download-images，上传数据集到服务器任意目录并解压（如：/home/HwHiAiUser/dataset）。本模型将使用到ILSVRC2012_img_val.tar验证集及ILSVRC2012_devkit_t12.gz中的val_label.txt数据标签。
```bash
├── datasets
    ├── val
    ├── val_label.txt 

```
### <a name="41">4.2 数据预处理</a>
Conformer-base模型使用ImageNet2012中的5万张验证集数据进行测试，具体来说参考Conformer-base的源码仓中的测试过程对验证集图像进行缩放，中心裁剪以及归一化，并将图像数据转换为二进制文件(.bin)  

```bash
mkdir ./bin
python Conformer-base_preprocess.py --src_path {dataset_path}/val --save_path ./bin
```

## <a name="5">5. 离线推理</a>      

### <a name="51">5.1 使用msame工具进行推理</a>
1. 获取msame工具
```bash
https://gitee.com/ascend/tools/tree/master/msame
```

2.Bin文件输入执行
```bash
./msame --model ./conformer_base_bs1.om --input ./bin --output ./output --outfmt TXT
```
### <a name="52">5.2 精度验证</a>
调用Conformer-base_postprocess.py脚本与数据集标签val_label.txt比对，可以获得Accuracy数据，结果保存在acc_result.json中
```bash
python Conformer-base_postprocess.py --anno_file={dataset_path}/val_label.txt --benchmark_out=./output/{msame_out}/ --result_file=acc_result.json
```
> **说明：**
>第一个参数为标签数据，第二个参数为msame在./output/路径下生成的推理结果保存的目录，第三个参数为生成结果文件。
(由于msame工具不支持多batch推理，因此只验证batch_size=1的精度)

### <a name="53">5.3 使用msame的纯推理模式测试模型不同batch的性能</a>
```bash
./msame --model=./conformer_base_bs{batch_size}.om --output=./output --loop=20
```
> **说明：**
>{batch_size}为模型的batch

3. 精度与性能数据


| 模型                | 参考精度     | 310p离线推理精度   | 性能基准         | 310p性能        |
|---------------------|-------------|-------------     |--------------   |--------------|
| Conformer-base bs1  | top1:83.82% | top1:83.85%     | fps 151.8395     | fps 162.3200 |


|   模型              |  性能基准  |  310P性能  |
| :------:            | :--------: | :--------: |
| Conformer-base bs1  | 151.8395fps | 162.3200fps |
| Conformer-base bs4  | 211.3495fps | 245.5819fps |
| Conformer-base bs8  | 218.5971fps | 267.738fps |
| Conformer-base bs16 | 221.4235ps | 265.0182ps  |
| Conformer-base bs32 | 222.7179fps | 253.0426fps |
| Conformer-base bs64 | 138.7254fps | 227.6486fps |




